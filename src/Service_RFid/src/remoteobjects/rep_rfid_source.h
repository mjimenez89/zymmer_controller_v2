#ifndef REP_RFID_SOURCE_H
#define REP_RFID_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class RFIDSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "RFID")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "67f5ecd6804a8546d882c14570d0863d2a34915d")
    Q_PROPERTY(QStringList msg READ msg WRITE setMsg NOTIFY msgChanged)
    Q_PROPERTY(bool pressViaje READ pressViaje WRITE setPressViaje NOTIFY pressViajeChanged)
    Q_PROPERTY(QString path READ path WRITE setPath NOTIFY pathChanged)

public:
    explicit RFIDSource(QObject *parent = nullptr) : QObject(parent)
    {
    }

public:
    ~RFIDSource() override = default;

    virtual QStringList msg() const = 0;
    virtual bool pressViaje() const = 0;
    virtual QString path() const = 0;
    virtual void setMsg(QStringList msg) = 0;
    virtual void setPressViaje(bool pressViaje) = 0;
    virtual void setPath(QString path) = 0;

Q_SIGNALS:
    void msgChanged(QStringList msg);
    void pressViajeChanged(bool pressViaje);
    void pathChanged(QString path);

public Q_SLOTS:
    virtual void pushMsg(QStringList msg)
    {
        setMsg(msg);
    }
    virtual void pushPressViaje(bool pressViaje)
    {
        setPressViaje(pressViaje);
    }
    virtual void pushPath(QString path)
    {
        setPath(path);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};


class RFIDSimpleSource : public RFIDSource
{
    Q_OBJECT

public:
    explicit RFIDSimpleSource(QObject *parent = nullptr) : RFIDSource(parent)
    , m_msg()
    , m_pressViaje(false)
    , m_path()
    {
    }

public:
    ~RFIDSimpleSource() override = default;

    QStringList msg() const override { return m_msg; }
    bool pressViaje() const override { return m_pressViaje; }
    QString path() const override { return m_path; }
    void setMsg(QStringList msg) override
    {
        if (msg != m_msg) {
            m_msg = msg;
            Q_EMIT msgChanged(m_msg);
        }
    }
    void setPressViaje(bool pressViaje) override
    {
        if (pressViaje != m_pressViaje) {
            m_pressViaje = pressViaje;
            Q_EMIT pressViajeChanged(m_pressViaje);
        }
    }
    void setPath(QString path) override
    {
        if (path != m_path) {
            m_path = path;
            Q_EMIT pathChanged(m_path);
        }
    }

private:
    QStringList m_msg;
    bool m_pressViaje;
    QString m_path;
};


template <class ObjectType>
struct RFIDSourceAPI : public SourceApiMap
{
    RFIDSourceAPI(ObjectType *object, const QString &name = QLatin1String("RFID"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 3;
        m_properties[1] = QtPrivate::qtro_property_index<ObjectType>(&ObjectType::msg, static_cast<QStringList (QObject::*)()>(0),"msg");
        QtPrivate::qtro_method_test<ObjectType>(&ObjectType::msgChanged, static_cast<void (QObject::*)()>(0));
        m_properties[2] = QtPrivate::qtro_property_index<ObjectType>(&ObjectType::pressViaje, static_cast<bool (QObject::*)()>(0),"pressViaje");
        QtPrivate::qtro_method_test<ObjectType>(&ObjectType::pressViajeChanged, static_cast<void (QObject::*)()>(0));
        m_properties[3] = QtPrivate::qtro_property_index<ObjectType>(&ObjectType::path, static_cast<QString (QObject::*)()>(0),"path");
        QtPrivate::qtro_method_test<ObjectType>(&ObjectType::pathChanged, static_cast<void (QObject::*)()>(0));
        m_signals[0] = 3;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::msgChanged, static_cast<void (QObject::*)(QStringList)>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_signals[2] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::pressViajeChanged, static_cast<void (QObject::*)(bool)>(0),m_signalArgCount+1,&m_signalArgTypes[1]);
        m_signals[3] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::pathChanged, static_cast<void (QObject::*)(QString)>(0),m_signalArgCount+2,&m_signalArgTypes[2]);
        m_methods[0] = 3;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::pushMsg, static_cast<void (QObject::*)(QStringList)>(0),"pushMsg(QStringList)",m_methodArgCount+0,&m_methodArgTypes[0]);
        m_methods[2] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::pushPressViaje, static_cast<void (QObject::*)(bool)>(0),"pushPressViaje(bool)",m_methodArgCount+1,&m_methodArgTypes[1]);
        m_methods[3] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::pushPath, static_cast<void (QObject::*)(QString)>(0),"pushPath(QString)",m_methodArgCount+2,&m_methodArgTypes[2]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("RFID"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return m_properties[1];
        case 1: return m_properties[2];
        case 2: return m_properties[3];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 0;
        case 1: return 1;
        case 2: return 2;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("msgChanged(QStringList)");
        case 1: return QByteArrayLiteral("pressViajeChanged(bool)");
        case 2: return QByteArrayLiteral("pathChanged(QString)");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushMsg(QStringList)");
        case 1: return QByteArrayLiteral("pushPressViaje(bool)");
        case 2: return QByteArrayLiteral("pushPath(QString)");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"67f5ecd6804a8546d882c14570d0863d2a34915d"}; }

    int m_enums[1];
    int m_properties[4];
    int m_signals[4];
    int m_methods[4];
    const QString m_name;
    int m_signalArgCount[3];
    const int* m_signalArgTypes[3];
    int m_methodArgCount[3];
    const int* m_methodArgTypes[3];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_RFID_SOURCE_H
